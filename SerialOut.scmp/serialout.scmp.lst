0000-                  7
0000-                  8                        .CR     scmp                            //Select the intended overlay
0000-                  9                .TF     SerialOut.scmp.hex,int
0000-                 10                        .TF     SerialOut.scmp.bin,BIN
0000-                 12
0000-                 13                        #// .OR     $0001           //The SC/MP can't start at $0000 !
2000-                 14                        .OR $2000
2000-                 15                        .TA $0000
2000-                 16
Source file: c:\users\roland\source\sc_mp\serialout.scmp\serialout.scmp.asm

*** Warning: Instruction starts at page boundary
     17                 NOP

2000-08               17 (   5)                 NOP
2001-C4 0F            18 (  10)         LDI #$0F     // Pointer II on Adr. $0FFF
2003-36               19 (   8)         XPAH 2
2004-C4 FF            20 (  10)         LDI #$FF
2006-32               21 (   8)         XPAL 2
2007-                 22
2007-C4 E0            23 (  10)         LDI #$E0        // Initialize , Stackptr to 0FE0
2009-CA 00            24 (  18)         ST (2)
200B-C4 0F            25 (  10)         LDI #$0F
*** Error: Out of range
     26         ST $FF(2)

200F-                 27
200F-C4 00            28 (  10)         LDI #$00        // Set Stackdepth and Stacklevel to Null
*** Error: Out of range
     29         ST $Fa(2)

*** Error: Out of range
     30         ST $F9(2)

2015-                 31
2015-                 32                #// Calculate address of SerialWrite routine
2015-                 33
*** Error: Out of range
     34         LD $E2(2)       // Programmstartaddress low

2017-02               35 (   5)         CCL
2018-F4 26            36 (  11)         ADI SerialWrite-1
*** Error: Out of range
     37         ST $F1(2)

*** Error: Out of range
     38         LD $E3(2)       // Programmstartaddress high

201E-F4 00            39 (  11)         ADI $00
*** Error: Out of range
     40         ST $F2(2)

2022-02               41 (   5)         CCL
2023-                 42
2023-90 45            43 (  11)         JMP CONT
2025-08               44 (   5)         Nop
2026-08               45 (   5)     Nop
2027-                 46
2027-                 47        #//**********************************************************
2027-                 48        SerialWrite
2027-C4 00            49 (  10)         LDI #$00        // Ptr I on LEDs
2029-31               50 (   8)         XPAL 1
202A-C4 11            51 (  10)         LDI #$11
202C-35               52 (   8)         XPAH 1
202D-C4 D0            53 (  10)         LDI #$D0        // Output Sync on LED4 (for tests)
202F-C9 00            54 (  18)         ST (1)
2031-C4 07            55 (  10)         LDI #$07
2033-8F 00            56 ( 13+)         DLY $00
2035-C4 C0            57 (  10)         LDI #$C0
2037-C9 00            58 (  18)         ST (1)
2039-                 59
2039-C4 E0            60 (  10)         LDI #$E0        // Ptr II on Stackbase 0FE0
203B-32               61 (   8)         XPAL 2
203C-C4 0F            62 (  10)         LDI #$0F
203E-36               63 (   8)         XPAH 2
203F-                 64
203F-C4 09            65 (  10)         LDI #$09       // Load Bit Counter
2041-CA 08            66 (  18)         ST $08(2)      // Store in Stackbase + 8
2043-                 67
2043-C4 00            68 (  10)         LDI #$00
2045-01               69 (   7)         XAE
2046-19               70 (   5)         SIO             // Output Startbit
2047-C4 58            71 (  10)         LDI #$58
2049-8F 01            72 ( 13+)         DLY $01
204B-                 73
204B-                 74                #//LD $15(2)      // Startsaddr. (and following) in Ptr I
204B-                 75                #//XPAL 1
204B-                 76                #//LD $14(2)
204B-                 77                #//XPAH 1
204B-                 78                #//LD (1)         // Load Databyte
204B-                 79
204B-C2 07            80 (  18)         LD $07(2)       // get from Stackbase + 7
204D-                 81                #//ST $07(2)      // store in Stackbase + 7
204D-01               82 (   7)         XAE
204E-                 83
204E-19               84 (   5) L1      SIO
204F-                 85                #//LDI #$62   // other timeconstant
204F-C4 69            86 (  10)         LDI #$69
2051-8F 01            87 ( 13+)         DLY $01
2053-40               88 (   6)         LDE
2054-DC 80            89 (  10)         ORI #$80
2056-01               90 (   7)         XAE
2057-BA 08            91 (  22)         DLD $08(2)
2059-9C F3            92 (9/11)         JNZ L1
205B-                 93
205B-C4 FF            94 (  10)         LDI #$FF    // 2 Stop Bits
205D-01               95 (   7)         XAE
205E-19               96 (   5)         SIO
205F-C4 62            97 (  10)         LDI #$62
2061-8F 01            98 ( 13+)         DLY $01
2063-C4 62            99 (  10)         LDI #$62
2065-8F 01           100 ( 13+)         DLY $01
2067-3F              101 (   7)         XPPC 3
2068-90 BD           102 (  11)         JMP SerialWrite
206A-                103
206A-                104        #//*************************************************************
206A-                105
206A-C4 00           106 (  10) CONT    LDI #$00        // Ptr I auf LEDs
206C-31              107 (   8)         XPAL 1
206D-C4 11           108 (  10)         LDI #$11
206F-35              109 (   8)         XPAH 1
2070-                110
2070-C4 C0           111 (  10)         LDI #$C0        // $C0 an LEDS, schaltet seriellen Ausgang frei
2072-C9 00           112 (  18)         ST (1)
2074-                113
2074-C4 00           114 (  10)         LDI #$00        // Ptr I auf Display
2076-31              115 (   8)         XPAL 1
2077-C4 07           116 (  10)         LDI #$07
2079-35              117 (   8)         XPAH 1
207A-C4 5F           118 (  10)         LDI #$5F
207C-C9 07           119 (  18)         ST $07(1)
207E-C4 5E           120 (  10)         LDI #$5E
2080-C9 06           121 (  18)         ST $06(1)
2082-C4 80           122 (  10)         LDI #$80
2084-C9 05           123 (  18)         ST $05(1)
2086-C9 04           124 (  18)         ST $04(1)
2088-C9 03           125 (  18)         ST $03(1)
208A-C9 02           126 (  18)         ST $02(1)
208C-C4 00           127 (  10)         LDI #$00
208E-C9 01           128 (  18)         ST $01(1)
2090-C9 00           129 (  18)         ST $00(1)
2092-                130
2092-C4 3E           131 (  10)         LDI #$3E        // Adr. von Gethex - 1  (=0x0055) in Rout.Adr.
*** Error: Out of range
    132         ST $FE(2)

2096-C4 02           133 (  10)         LDI #$02
*** Error: Out of range
    134         ST $FD(2)

209A-C4 55           135 (  10)         LDI #$55        // Adr. von Push -1 (=0x0055) in Ptr III
209C-33              136 (   8)         XPAL 3
209D-C4 00           137 (  10)         LDI #$00
209F-37              138 (   8)         XPAH 3
20A0-3F              139 (   7)         XPPC 3          // Anfangsdresse von Keyboard holen
20A1-                140
20A1-C4 E0           141 (  10)         LDI #$E0
20A3-32              142 (   8)         XPAL 2          // Pointer II auf Stackbase Adr. 0x0FE0 (steht vorher auf 0FFF)
20A4-C4 0F           143 (  10)         LDI #$0F
20A6-36              144 (   8)         XPAH 2
20A7-C2 01           145 (  18)         LD $01(2)       // Anfangsadr in 0x0FF5 und 0xFF4 sichern
20A9-CA 15           146 (  18)         ST $15(2)
20AB-C2 02           147 (  18)         LD $02(2)
20AD-CA 14           148 (  18)         ST $14(2)
20AF-3F              149 (   7)         XPPC 3          // Endadr. von Keyboard holen
20B0-C2 01           150 (  18)         LD $01(2)
20B2-CA 13           151 (  18)         ST $13(2)       // Endadr in 0x0FF3 und 0xFF2 sichern
20B4-C2 02           152 (  18)         LD $02(2)
20B6-CA 12           153 (  18)         ST $12(2)
20B8-                154
20B8-C2 10           155 (  18) LOOP    LD $10(2)     // Load address of SerialWrite (low) in ROUTAD
20BA-                156
20BA-CA 1D           157 (  18)         ST $1D(2)
20BC-C2 11           158 (  18)         LD $11(2)     // Load address of SerialWrite (high) in ROUTAD
20BE-                159
20BE-CA 1C           160 (  18)         ST $1C(2)
20C0-C4 55           161 (  10)         LDI #$55        // Adr. von Push -1 (=0x0055) in Ptr III
20C2-33              162 (   8)         XPAL 3
20C3-C4 00           163 (  10)         LDI #$00
20C5-37              164 (   8)         XPAH 3
20C6-                165
20C6-C2 15           166 (  18)         LD $15(2)
20C8-31              167 (   8)         XPAL 1
20C9-C2 14           168 (  18)         LD $14(2)
20CB-35              169 (   8)         XPAH 1
20CC-C1 00           170 (  18)         LD (1)          // Load DataByte
20CE-CA 07           171 (  18)         ST $07(2)
20D0-                172               #// LD (1)          // Load DataByte
20D0-                173
20D0-3F              174 (   7)         XPPC 3          // Byte ausgeben
20D1-                175
20D1-C4 E0           176 (  10)         LDI #$E0
20D3-32              177 (   8)         XPAL 2          // Pointer II auf Stackbase
20D4-C4 0F           178 (  10)         LDI #$0F
20D6-36              179 (   8)         XPAH 2
20D7-                180
20D7-C2 13           181 (  18)         LD $13(2)      // Adresse = Endadresse ?
20D9-03              182 (   5)         SCL
20DA-FA 15           183 (  20)         CAD $15(2)
20DC-9C 12           184 (9/11)         JNZ Weiter1
20DE-C2 12           185 (  18)         LD $12(2)
20E0-FA 14           186 (  20)         CAD $14(2)
20E2-9C 0C           187 (9/11)         JNZ Weiter1
20E4-C4 00           188 (  10)         LDI #$00        // Ptr I auf LEDs
20E6-31              189 (   8)         XPAL 1
20E7-C4 11           190 (  10)         LDI #$11
20E9-35              191 (   8)         XPAH 1
20EA-C4 00           192 (  10)         LDI #$00
20EC-C9 00           193 (  18)         ST (1)
20EE-92 30           194 (  11)         JMP $30(2)   // ja: Elbug anspringen
20F0-02              195 (   5) Weiter1 CCL
20F1-C2 15           196 (  18)         LD $15(2)    // Anfangsadresse incrementieren
20F3-F4 01           197 (  11)         ADI $01
20F5-CA 15           198 (  18)         ST $15(2)
20F7-C2 14           199 (  18)         LD $14(2)
20F9-F4 00           200 (  11)         ADI $00
20FB-CA 14           201 (  18)         ST $14(2)
20FD-02              202 (   5)         CCL
20FE-90 B8           203 (  11)         JMP LOOP
2100-                204
2100-                205
2100-                206
2100-                207
2100-                208
2100-                209
2100-                210
